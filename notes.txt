#INTRODUCTION LESSON
React - for single page applications - SPA

before react it was popular to make html document for every page:
index.html
contacts.html ...
React works only with one html file and changes its content
It is convinient, because there is only one downloading of page - user do not need to reload
page in every action.

Actually everything what makes react can be made using only JS - but it is slow approach.

__________________________________________________________________________________
LESSON 1

there are many ways how to include react to project.
The simpliest approach of connecting react - is connect via link

<script crossorigin src="https://unpkg.com/react@17/umd/react.development.js"></script>
<script crossorigin src="https://unpkg.com/react-dom@17/umd/react-dom.development.js"></script

here we connect reactjs and react-dom libs to project. It is better to connect it in head, 
before body tag processing.

P.S. unpkg.com - CDN (content divilivery network)

babel - compiler for react, which compiles jsx files to js files
we need to connect compiler babel:
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

babel requires for all js files which are connected to project are with attr
type="text/babel"
example:
<script type="text/babel" src="index.js"></script>

so, steps to connect react via links:
1. connect react lib in head
2. connect react-dom lib in head
3. connect babel lib in head
4. connect your js file in the end of body with type="text/babel"

method ReactDOM.render( htmlTag, containerId )

can put only one html tag inside container with containerId
so, if we want to put many elements in ReactDOM.render, we need to wrap them into one div


______________________________________________________________________________________
LESSON 2 part 1

JSX - javaScriptXML - files where we can write html structure inside js code. JSX is copiled
by babel compiler.

with jsx it is simple to put html code in the page:
ReactDOM.render(<h1>Hello</h1>, document.getElementById("app));

without jsx technology it could be hard:
ReactDOM.render(
	React.createElement("input", {placeholder: "myPlaceholder"}),
	document.getElementById("app")
);

in jsx we even can make html element in variable:
const element = <input placeholder="" />

so, we can use react like jetpack-compose
inside html put {} and use all the js code you created

const elements = <div>
    <h1>{helpText}</h1>
    <input placeholder={helpText}
           onClick={inputClick}
           onMouseOver={mouseOver}/>
    <p>{helpText === "Help text!" ? "Yes" : "No"}</p>
</div>

Features of jsx:
1. class is changed to className (because we have keyword class in js)
2. all html attrs in camel case, for example: onClick, onMouseEnter


____________________________________________________________________________________
Lesson 2 part 2

it is better to connect react to project via server via npm
npm = node package manager
nvm = node version manager

firstly it is better to install nvm and using nvm install npm and node

npmjs.com - site where you can find any js lib

npm i react (there must be a joke, that frontenders do not like write words fully :D )

WE HAVE TO WRITE THIS COMMANDS IN DIR OF OUR PROJECT!

after the commands we will have package.json file (like build.gradle)

package-lock.json - also config file, but it is for system, not for you 

dir node_modules - with all the libs in your project

actually we can create project via template - it is better


npx - it is also package manager, but it also can do some actions with libs after installing
npx = NODE PACKAGE EXECUTE

npx create-react-app . - create project in current dir

P.S. ASAP in english = as soon as possibleA

react template project structure:
node-modules - all the libs in project

package.json - config file
package-lock.json - config file for system, not for user
public/ - all files which user can see. 
src/ - files for programmer

and now it is not enough to just open index.html - we need to launch project through node

in package.json we can see scripts - aliases for project in terminal:

react-scripts - lib for aliases for react project

react-scripts build - to precompile all files for production
react-scripts start - to launch project


npm run build (after this there will be build folder in the project)
npm run start 


actually ReactDOM.render is deprecated now.
Now it is recommended to use createRoot method.



________________________________________________________________________________

